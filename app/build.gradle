apply plugin: 'com.android.application'
def useDebugFix=true

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "io.github.bunnyblue.droidfix"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        releaseDroidFix {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro','proguard-droidfix.pro'
            signingConfig buildTypes.debug.signingConfig
        }
        debugDroidFix {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro','proguard-droidfix.pro'
            signingConfig buildTypes.debug.signingConfig
        }
    }
}
gradle.taskGraph.beforeTask { Task task ->
    if ("app".equals(task.project.name)&&"transformClassesAndResourcesWithProguardForDebug".equals(task.name)&&useDebugFix)
    {
        task.doLast {
            copy {
                from buildDir.getAbsolutePath()+"/outputs/mapping/debug"
                into projectDir.getAbsolutePath()+"/DroidPatch/"
                include 'mapping.txt'
            }
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "injectCode" ,projectDir.getAbsolutePath(),"debug"
            }
                javaexec {
                    classpath "$rootDir/ClassComputer.jar"
                    main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                    args "cacheClassesTable" ,projectDir.getAbsolutePath(),"debug"
                }


        }
    }else  if ("app".equals(task.project.name)&&"transformClassesAndResourcesWithProguardForRelease".equals(task.name)){

        task.doLast {
            copy {
                from buildDir.getAbsolutePath() + "/outputs/mapping/release"
                into projectDir.getAbsolutePath() + "/DroidPatch/"
                include 'mapping.txt'
            }
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "injectCode", projectDir.getAbsolutePath(), "release"
            }
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "cacheClassesTable", projectDir.getAbsolutePath(), "release"
            }

        }
    }else  if ("app".equals(task.project.name)&&"transformClassesAndResourcesWithProguardForDebugDroidFix".equals(task.name)){
        task.doLast {
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "injectCode", projectDir.getAbsolutePath(), "debugDroidFix"
            }
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "diffPatch", projectDir.getAbsolutePath(), "debugDroidFix"
            }
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "buildPkg", projectDir.getAbsolutePath(),"patch"
            }


        }

    }else  if ("app".equals(task.project.name)&&"transformClassesAndResourcesWithProguardForReleaseDroidFix".equals(task.name)){
        task.doLast {
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "injectCode", projectDir.getAbsolutePath(), "releaseDroidFix"
            }
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "diffPatch", projectDir.getAbsolutePath(), "releaseDroidFix"
            }
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "buildPkg", projectDir.getAbsolutePath(),"patch"
            }

        }
    }
    //support 1.3
    if ("app".equals(task.project.name)&&"proguardDebug".equals(task.name)&&useDebugFix)
    {
        task.doLast {
            copy {
                from buildDir.getAbsolutePath()+"/outputs/mapping/debug"
                into projectDir.getAbsolutePath()+"/DroidPatch/"
                include 'mapping.txt'
            }
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "injectCode" ,projectDir.getAbsolutePath(),"debug"
            }
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "cacheClassesTable" ,projectDir.getAbsolutePath(),"debug"
            }


        }
    }else  if ("app".equals(task.project.name)&&"proguardRelease".equals(task.name)){

        task.doLast {
            copy {
                from buildDir.getAbsolutePath() + "/outputs/mapping/release"
                into projectDir.getAbsolutePath() + "/DroidPatch/"
                include 'mapping.txt'
            }
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "injectCode", projectDir.getAbsolutePath(), "release"
            }
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "cacheClassesTable", projectDir.getAbsolutePath(), "release"
            }

        }
    }else  if ("app".equals(task.project.name)&&"proguardDebugDroidFix".equals(task.name)){
        task.doLast {
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "injectCode", projectDir.getAbsolutePath(), "debugDroidFix"
            }
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "diffPatch", projectDir.getAbsolutePath(), "debugDroidFix"
            }
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "buildPkg", projectDir.getAbsolutePath(),"patch"
            }


        }

    }else  if ("app".equals(task.project.name)&&"proguardReleaseDroidFix".equals(task.name)){
        task.doLast {
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "injectCode", projectDir.getAbsolutePath(), "releaseDroidFix"
            }
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "diffPatch", projectDir.getAbsolutePath(), "releaseDroidFix"
            }
            javaexec {
                classpath "$rootDir/ClassComputer.jar"
                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
                args "buildPkg", projectDir.getAbsolutePath(),"patch"
            }

        }
    }
    //

}
/*
 * DroidFix Project
 * file build.gradle  is  part of DroidFix
 * The MIT License (MIT)  Copyright (c) 2015 Bunny Blue.
 *
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *
 */

//gradle.taskGraph.afterTask { Task task, TaskState state ->
//    if (state.failure) {
//        println "FAILED@@@@@@@@@@@@@@@@@"+task.name
//    }
//    else {
//        if ("app".equals(task.project.name)&&"transformClassesAndResourcesWithProguardForDebug".equals(task.name))
//        {
//            copy {
//                from buildDir.getAbsolutePath()+"/outputs/mapping/debug"
//                into projectDir.getAbsolutePath()+"/DroidPatch/"
//                include 'mapping.txt'
//            }
//
//            javaexec {
//                classpath "$rootDir/ClassComputer.jar"
//                main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
//                args "injectCode" ,projectDir.getAbsolutePath(),"debug"
//            }
//            if (cacheClassesTable){
//                javaexec {
//                    classpath "$rootDir/ClassComputer.jar"
//                    main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
//                    args "cacheClassesTable" ,projectDir.getAbsolutePath(),"debug"
//                }
//            }
//            if (diffPatch){
//                javaexec {
//                    classpath "$rootDir/ClassComputer.jar"
//                    main = 'io.github.bunnyblue.droidfix.classcomputer.ClassComputer'
//                    args "diffPatch" ,projectDir.getAbsolutePath(),"debug"
//                }
//            }
//            File resDir=    file(buildDir.getAbsolutePath()+"/intermediates/res/merged/release")
//
//
//
//
//        }
//    }
//}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.android.support:design:23.1.0'
    compile project(':droidfixcore')
}
